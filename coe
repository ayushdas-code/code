# Load libraries

import numpy as np
import pandas as pd
import itertools
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
#from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
#Read the data
df=pd.read_csv('E:\\news.csv')
#Get shape and head
print(df.shape)
df.head(20)
(6335, 4)
Unnamed: 0	title	text	label
0	8476	You Can Smell Hillary’s Fear	Daniel Greenfield, a Shillman Journalism Fello...	FAKE
1	10294	Watch The Exact Moment Paul Ryan Committed Pol...	Google Pinterest Digg Linkedin Reddit Stumbleu...	FAKE
2	3608	Kerry to go to Paris in gesture of sympathy	U.S. Secretary of State John F. Kerry said Mon...	REAL
3	10142	Bernie supporters on Twitter erupt in anger ag...	— Kaydee King (@KaydeeKing) November 9, 2016 T...	FAKE
4	875	The Battle of New York: Why This Primary Matters	It's primary day in New York and front-runners...	REAL
5	6903	Tehran, USA	\nI’m not an immigrant, but my grandparents ...	FAKE
6	7341	Girl Horrified At What She Watches Boyfriend D...	Share This Baylee Luciani (left), Screenshot o...	FAKE
7	95	‘Britain’s Schindler’ Dies at 106	A Czech stockbroker who saved more than 650 Je...	REAL
8	4869	Fact check: Trump and Clinton at the 'commande...	Hillary Clinton and Donald Trump made some ina...	REAL
9	2909	Iran reportedly makes new push for uranium con...	Iranian negotiators reportedly have made a las...	REAL
10	1357	With all three Clintons in Iowa, a glimpse at ...	CEDAR RAPIDS, Iowa — “I had one of the most wo...	REAL
11	988	Donald Trump’s Shockingly Weak Delegate Game S...	Donald Trump’s organizational problems have go...	REAL
12	7041	Strong Solar Storm, Tech Risks Today | S0 News...	Click Here To Learn More About Alexandra's Per...	FAKE
13	7623	10 Ways America Is Preparing for World War 3	October 31, 2016 at 4:52 am \nPretty factual e...	FAKE
14	1571	Trump takes on Cruz, but lightly	Killing Obama administration rules, dismantlin...	REAL
15	4739	How women lead differently	As more women move into high offices, they oft...	REAL
16	7737	Shocking! Michele Obama & Hillary Caught Glamo...	Shocking! Michele Obama & Hillary Caught Glamo...	FAKE
17	8716	Hillary Clinton in HUGE Trouble After America ...	0 \nHillary Clinton has barely just lost the p...	FAKE
18	3304	What's in that Iran bill that Obama doesn't like?	Washington (CNN) For months, the White House a...	REAL
19	3078	The 1 chart that explains everything you need ...	While paging through Pew's best data visualiza...	REAL
# Get the labels
labels=df.label
labels.head()
#Group by FAKE vs REAL
print(df.groupby('label').size())
label
FAKE    3164
REAL    3171
dtype: int64
# Split the dataset
x_train,x_test,y_train,y_test=train_test_split(df['text'], labels, test_size=0.2, random_state=7)
x_train.head()
6237    The head of a leading survivalist group has ma...
3722    ‹ › Arnaldo Rodgers is a trained and educated ...
5774    Patty Sanchez, 51, used to eat 13,000 calories...
336     But Benjamin Netanyahu’s reelection was regard...
3622    John Kasich was killing it with these Iowa vot...
Name: text, dtype: object
y_train.head()
6237    FAKE
3722    FAKE
5774    FAKE
336     REAL
3622    REAL
Name: label, dtype: object
# Initialize a TfidfVectorizer
tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)
tfidf_train=tfidf_vectorizer.fit_transform(x_train) 
tfidf_test=tfidf_vectorizer.transform(x_test)
#classifier
pac=PassiveAggressiveClassifier(max_iter=50)
knn=KNeighborsClassifier()
cart=DecisionTreeClassifier()
svm=SVC(gamma='auto')
clf = MultinomialNB()
rf = RandomForestClassifier(n_estimators=100)
CONFUSION MATRIX PRINT
import matplotlib.pyplot as plt
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
   
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
PAC CLASSIFIER
#PAC: Predict on the test set and calculate accuracy
pac.fit(tfidf_train,y_train)

y_pred=pac.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)

print(f'PAC Accuracy: {round(score*100,2)}%')
PAC Accuracy: 92.82%
cm = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])
Confusion matrix, without normalization

DECISSION TREE CLASSIFIER
#Decision Tree - Predict on the test set and calculate accuracy
cart.fit(tfidf_train,y_train)
y_pred=cart.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])
print(f'Decission Tree Accuracy: {round(score*100,2)}%')
Decission Tree Accuracy: 79.24%
print('Decission Tree Confusion Matrix')
cm = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])
Decission Tree Confusion Matrix
Confusion matrix, without normalization

KNN CLASSIFIER
#KNN - Predict on the test set and calculate accuracy
knn.fit(tfidf_train,y_train)
y_pred=knn.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'KNN Accuracy: {round(score*100,2)}%')
KNN Accuracy: 56.12%
print('KNN Confusion Matrix')
cm = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])
KNN Confusion Matrix
Confusion matrix, without normalization

SVC CLASSIFIER
#SVC Predict on the test set and calculate accuracy
svm.fit(tfidf_train,y_train)
y_pred=svm.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'SVC Accuracy: {round(score*100,2)}%')
SVC Accuracy: 49.64%
print('SVC Confusion Matrix')
cm = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])
SVC Confusion Matrix
Confusion matrix, without normalization

NB CLASSIFIER
#NaiveBase - Predict on the test set and calculate accuracy
clf.fit(tfidf_train,y_train)
y_pred=clf.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'NB Accuracy: {round(score*100,2)}%')
NB Accuracy: 84.06%
print('NB Confusion Matrix')
cm = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])
NB Confusion Matrix
Confusion matrix, without normalization

RANDOM FOREST CLASSIFIER
#Random Forest - Predict on the test set and calculate accuracy
rf.fit(tfidf_train,y_train)
y_pred=rf.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'Random Forest Accuracy: {round(score*100,2)}%')
Random Forest Accuracy: 90.21%
print('Random Forest Confusion Matrix')
cm = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])
Random Forest Confusion Matrix
Confusion matrix, without normalization

 
